{"version":3,"sources":["turbopack:///[project]/src/lib/supabase.ts","turbopack:///[project]/src/lib/auth.ts","turbopack:///[project]/src/app/auth/callback/page.tsx"],"sourcesContent":["import { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true\n  }\n})\n\n// Types for our database\nexport type Database = {\n  public: {\n    Tables: {\n      profiles: {\n        Row: {\n          id: string\n          email: string\n          full_name: string | null\n          avatar_url: string | null\n          role: 'parent' | 'teacher' | 'admin'\n          created_at: string\n          updated_at: string\n        }\n        Insert: {\n          id: string\n          email: string\n          full_name?: string | null\n          avatar_url?: string | null\n          role?: 'parent' | 'teacher' | 'admin'\n          created_at?: string\n          updated_at?: string\n        }\n        Update: {\n          id?: string\n          email?: string\n          full_name?: string | null\n          avatar_url?: string | null\n          role?: 'parent' | 'teacher' | 'admin'\n          created_at?: string\n          updated_at?: string\n        }\n      }\n      children: {\n        Row: {\n          id: string\n          parent_id: string\n          name: string\n          age: number\n          tier: 'magic_workshop' | 'innovation_lab' | 'professional_studio'\n          avatar_url: string | null\n          created_at: string\n          updated_at: string\n        }\n        Insert: {\n          id?: string\n          parent_id: string\n          name: string\n          age: number\n          tier?: 'magic_workshop' | 'innovation_lab' | 'professional_studio'\n          avatar_url?: string | null\n          created_at?: string\n          updated_at?: string\n        }\n        Update: {\n          id?: string\n          parent_id?: string\n          name?: string\n          age?: number\n          tier?: 'magic_workshop' | 'innovation_lab' | 'professional_studio'\n          avatar_url?: string | null\n          created_at?: string\n          updated_at?: string\n        }\n      }\n    }\n  }\n}\n\n","import { supabase } from './supabase'\nimport { Database } from './database.types'\n\ntype Profile = Database['public']['Tables']['profiles']['Row']\ntype Child = Database['public']['Tables']['children']['Row']\n\nexport interface AuthUser {\n  id: string\n  email: string\n  profile: Profile | null\n  children: Child[]\n}\n\nexport interface AuthState {\n  user: AuthUser | null\n  loading: boolean\n  error: string | null\n}\n\n// Determine tier based on age\nexport function determineTier(age: number): 'magic_workshop' | 'innovation_lab' | 'professional_studio' {\n  if (age <= 7) return 'magic_workshop'\n  if (age <= 12) return 'innovation_lab'\n  return 'professional_studio'\n}\n\n// Get current user with profile and children\nexport async function getCurrentUser(): Promise<AuthUser | null> {\n  try {\n    const { data: { user }, error: authError } = await supabase.auth.getUser()\n    \n    if (authError || !user) {\n      return null\n    }\n\n    // Get user profile\n    const { data: profile, error: profileError } = await supabase\n      .from('profiles')\n      .select('*')\n      .eq('id', user.id)\n      .single()\n\n    if (profileError) {\n      console.error('Error fetching profile:', profileError)\n      return null\n    }\n\n    // Get children if user is a parent\n    let children: Child[] = []\n    if (profile?.role === 'parent') {\n      const { data: childrenData, error: childrenError } = await supabase\n        .from('children')\n        .select('*')\n        .eq('parent_id', user.id)\n        .order('created_at', { ascending: true })\n\n      if (!childrenError && childrenData) {\n        children = childrenData\n      }\n    }\n\n    return {\n      id: user.id,\n      email: user.email || '',\n      profile,\n      children\n    }\n  } catch (error) {\n    console.error('Error getting current user:', error)\n    return null\n  }\n}\n\n// Sign up new parent user\nexport async function signUpParent(email: string, password: string, fullName: string) {\n  try {\n    const { data, error } = await supabase.auth.signUp({\n      email,\n      password,\n      options: {\n        data: {\n          full_name: fullName,\n          role: 'parent'\n        }\n      }\n    })\n\n    if (error) {\n      throw error\n    }\n\n    return { data, error: null }\n  } catch (error) {\n    console.error('Error signing up parent:', error)\n    return { data: null, error }\n  }\n}\n\n// Sign in user\nexport async function signIn(email: string, password: string) {\n  try {\n    const { data, error } = await supabase.auth.signInWithPassword({\n      email,\n      password\n    })\n\n    if (error) {\n      throw error\n    }\n\n    return { data, error: null }\n  } catch (error) {\n    console.error('Error signing in:', error)\n    return { data: null, error }\n  }\n}\n\n// Sign out user\nexport async function signOut() {\n  try {\n    const { error } = await supabase.auth.signOut()\n    if (error) {\n      throw error\n    }\n    return { error: null }\n  } catch (error) {\n    console.error('Error signing out:', error)\n    return { error }\n  }\n}\n\n// Create child profile\nexport async function createChildProfile(parentId: string, name: string, age: number) {\n  try {\n    const tier = determineTier(age)\n    \n    const { data, error } = await supabase\n      .from('children')\n      .insert({\n        parent_id: parentId,\n        name,\n        age,\n        tier\n      })\n      .select()\n      .single()\n\n    if (error) {\n      throw error\n    }\n\n    return { data, error: null }\n  } catch (error) {\n    console.error('Error creating child profile:', error)\n    return { data: null, error }\n  }\n}\n\n// Update child profile\nexport async function updateChildProfile(childId: string, updates: Partial<Pick<Child, 'name' | 'age' | 'avatar_url'>>) {\n  try {\n    // If age is being updated, recalculate tier\n    const updateData = { ...updates }\n    if (updates.age) {\n      updateData.tier = determineTier(updates.age)\n    }\n\n    const { data, error } = await supabase\n      .from('children')\n      .update(updateData)\n      .eq('id', childId)\n      .select()\n      .single()\n\n    if (error) {\n      throw error\n    }\n\n    return { data, error: null }\n  } catch (error) {\n    console.error('Error updating child profile:', error)\n    return { data: null, error }\n  }\n}\n\n// Delete child profile\nexport async function deleteChildProfile(childId: string) {\n  try {\n    const { error } = await supabase\n      .from('children')\n      .delete()\n      .eq('id', childId)\n\n    if (error) {\n      throw error\n    }\n\n    return { error: null }\n  } catch (error) {\n    console.error('Error deleting child profile:', error)\n    return { error }\n  }\n}\n\n// Get child by ID (with parent verification)\nexport async function getChildById(childId: string, parentId: string): Promise<Child | null> {\n  try {\n    const { data, error } = await supabase\n      .from('children')\n      .select('*')\n      .eq('id', childId)\n      .eq('parent_id', parentId)\n      .single()\n\n    if (error) {\n      console.error('Error fetching child:', error)\n      return null\n    }\n\n    return data\n  } catch (error) {\n    console.error('Error getting child by ID:', error)\n    return null\n  }\n}\n\n// Reset password\nexport async function resetPassword(email: string) {\n  try {\n    const { error } = await supabase.auth.resetPasswordForEmail(email, {\n      redirectTo: `${window.location.origin}/auth/reset-password`\n    })\n\n    if (error) {\n      throw error\n    }\n\n    return { error: null }\n  } catch (error) {\n    console.error('Error resetting password:', error)\n    return { error }\n  }\n}\n\n// Update password\nexport async function updatePassword(newPassword: string) {\n  try {\n    const { error } = await supabase.auth.updateUser({\n      password: newPassword\n    })\n\n    if (error) {\n      throw error\n    }\n\n    return { error: null }\n  } catch (error) {\n    console.error('Error updating password:', error)\n    return { error }\n  }\n}\n\n// Social login with Google\nexport async function signInWithGoogle() {\n  try {\n    const { error } = await supabase.auth.signInWithOAuth({\n      provider: 'google',\n      options: {\n        redirectTo: `${window.location.origin}/auth/callback`\n      }\n    })\n\n    if (error) {\n      throw error\n    }\n\n    return { error: null }\n  } catch (error) {\n    console.error('Error signing in with Google:', error)\n    return { error }\n  }\n}\n\n// Check if user has completed onboarding\nexport async function hasCompletedOnboarding(userId: string): Promise<boolean> {\n  try {\n    const { data, error } = await supabase\n      .from('profiles')\n      .select('onboarding_completed')\n      .eq('id', userId)\n      .single()\n\n    if (error || !data) {\n      return false\n    }\n\n    return data.onboarding_completed || false\n  } catch (error) {\n    console.error('Error checking onboarding status:', error)\n    return false\n  }\n}\n\n// Mark onboarding as completed\nexport async function completeOnboarding(userId: string) {\n  try {\n    const { error } = await supabase\n      .from('profiles')\n      .update({ onboarding_completed: true })\n      .eq('id', userId)\n\n    if (error) {\n      throw error\n    }\n\n    return { error: null }\n  } catch (error) {\n    console.error('Error completing onboarding:', error)\n    return { error }\n  }\n}\n\n","'use client'\n\nimport { useEffect, useState } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { supabase } from '@/lib/supabase'\nimport { hasCompletedOnboarding } from '@/lib/auth'\n\nexport default function AuthCallbackPage() {\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState('')\n  const router = useRouter()\n\n  useEffect(() => {\n    const handleAuthCallback = async () => {\n      try {\n        // Handle the OAuth callback\n        const { data, error } = await supabase.auth.getSession()\n        \n        if (error) {\n          console.error('Auth callback error:', error)\n          setError('Authentication failed. Please try again.')\n          return\n        }\n\n        if (data.session?.user) {\n          // Check if user has completed onboarding\n          const completedOnboarding = await hasCompletedOnboarding(data.session.user.id)\n          \n          if (completedOnboarding) {\n            // User exists and has completed onboarding, redirect to dashboard\n            router.push('/dashboard')\n          } else {\n            // New user or incomplete onboarding, redirect to onboarding\n            router.push('/onboarding')\n          }\n        } else {\n          // No session, redirect to sign in\n          router.push('/auth/signin')\n        }\n      } catch (err) {\n        console.error('Unexpected error in auth callback:', err)\n        setError('An unexpected error occurred. Please try again.')\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    handleAuthCallback()\n  }, [router])\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-cyan-50 flex items-center justify-center p-4\">\n        <div className=\"bg-white rounded-lg shadow-lg p-8 max-w-md w-full text-center\">\n          <div className=\"w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <span className=\"text-red-600 text-2xl\">⚠️</span>\n          </div>\n          <h1 className=\"text-xl font-semibold text-gray-900 mb-2\">Authentication Error</h1>\n          <p className=\"text-gray-600 mb-6\">{error}</p>\n          <button\n            onClick={() => router.push('/auth/signin')}\n            className=\"w-full bg-purple-600 text-white py-2 px-4 rounded-lg hover:bg-purple-700 transition-colors\"\n          >\n            Try Again\n          </button>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-cyan-50 flex items-center justify-center p-4\">\n      <div className=\"bg-white rounded-lg shadow-lg p-8 max-w-md w-full text-center\">\n        <div className=\"w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600\"></div>\n        </div>\n        <h1 className=\"text-xl font-semibold text-gray-900 mb-2\">Completing Sign In</h1>\n        <p className=\"text-gray-600\">Please wait while we set up your account...</p>\n      </div>\n    </div>\n  )\n}\n\n"],"names":[],"mappings":"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"}